// Code generated by capnpc-go. DO NOT EDIT.

package proto

import (
	math "math"
	strconv "strconv"
	capnp "zombiezen.com/go/capnproto2"
	text "zombiezen.com/go/capnproto2/encoding/text"
	schemas "zombiezen.com/go/capnproto2/schemas"
)

type SCIONDMsg struct{ capnp.Struct }
type SCIONDMsg_Which uint16

const (
	SCIONDMsg_Which_unset              SCIONDMsg_Which = 0
	SCIONDMsg_Which_pathReq            SCIONDMsg_Which = 1
	SCIONDMsg_Which_pathReply          SCIONDMsg_Which = 2
	SCIONDMsg_Which_asInfoReq          SCIONDMsg_Which = 3
	SCIONDMsg_Which_asInfoReply        SCIONDMsg_Which = 4
	SCIONDMsg_Which_revNotification    SCIONDMsg_Which = 5
	SCIONDMsg_Which_ifInfoRequest      SCIONDMsg_Which = 6
	SCIONDMsg_Which_ifInfoReply        SCIONDMsg_Which = 7
	SCIONDMsg_Which_serviceInfoRequest SCIONDMsg_Which = 8
	SCIONDMsg_Which_serviceInfoReply   SCIONDMsg_Which = 9
	SCIONDMsg_Which_revReply           SCIONDMsg_Which = 10
	SCIONDMsg_Which_segTypeHopReq      SCIONDMsg_Which = 11
	SCIONDMsg_Which_segTypeHopReply    SCIONDMsg_Which = 12
)

func (w SCIONDMsg_Which) String() string {
	const s = "unsetpathReqpathReplyasInfoReqasInfoReplyrevNotificationifInfoRequestifInfoReplyserviceInfoRequestserviceInfoReplyrevReplysegTypeHopReqsegTypeHopReply"
	switch w {
	case SCIONDMsg_Which_unset:
		return s[0:5]
	case SCIONDMsg_Which_pathReq:
		return s[5:12]
	case SCIONDMsg_Which_pathReply:
		return s[12:21]
	case SCIONDMsg_Which_asInfoReq:
		return s[21:30]
	case SCIONDMsg_Which_asInfoReply:
		return s[30:41]
	case SCIONDMsg_Which_revNotification:
		return s[41:56]
	case SCIONDMsg_Which_ifInfoRequest:
		return s[56:69]
	case SCIONDMsg_Which_ifInfoReply:
		return s[69:80]
	case SCIONDMsg_Which_serviceInfoRequest:
		return s[80:98]
	case SCIONDMsg_Which_serviceInfoReply:
		return s[98:114]
	case SCIONDMsg_Which_revReply:
		return s[114:122]
	case SCIONDMsg_Which_segTypeHopReq:
		return s[122:135]
	case SCIONDMsg_Which_segTypeHopReply:
		return s[135:150]

	}
	return "SCIONDMsg_Which(" + strconv.FormatUint(uint64(w), 10) + ")"
}

// SCIONDMsg_TypeID is the unique identifier for the type SCIONDMsg.
const SCIONDMsg_TypeID = 0x91ea9bb47f46c346

func NewSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func NewRootSCIONDMsg(s *capnp.Segment) (SCIONDMsg, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2})
	return SCIONDMsg{st}, err
}

func ReadRootSCIONDMsg(msg *capnp.Message) (SCIONDMsg, error) {
	root, err := msg.RootPtr()
	return SCIONDMsg{root.Struct()}, err
}

func (s SCIONDMsg) String() string {
	str, _ := text.Marshal(0x91ea9bb47f46c346, s.Struct)
	return str
}

func (s SCIONDMsg) Which() SCIONDMsg_Which {
	return SCIONDMsg_Which(s.Struct.Uint16(8))
}
func (s SCIONDMsg) Id() uint64 {
	return s.Struct.Uint64(0)
}

func (s SCIONDMsg) SetId(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s SCIONDMsg) SetUnset() {
	s.Struct.SetUint16(8, 0)

}

func (s SCIONDMsg) PathReq() (PathReq, error) {
	if s.Struct.Uint16(8) != 1 {
		panic("Which() != pathReq")
	}
	p, err := s.Struct.Ptr(0)
	return PathReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReq() bool {
	if s.Struct.Uint16(8) != 1 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReq(v PathReq) error {
	s.Struct.SetUint16(8, 1)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReq sets the pathReq field to a newly
// allocated PathReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReq() (PathReq, error) {
	s.Struct.SetUint16(8, 1)
	ss, err := NewPathReq(s.Struct.Segment())
	if err != nil {
		return PathReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) PathReply() (PathReply, error) {
	if s.Struct.Uint16(8) != 2 {
		panic("Which() != pathReply")
	}
	p, err := s.Struct.Ptr(0)
	return PathReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasPathReply() bool {
	if s.Struct.Uint16(8) != 2 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetPathReply(v PathReply) error {
	s.Struct.SetUint16(8, 2)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPathReply sets the pathReply field to a newly
// allocated PathReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewPathReply() (PathReply, error) {
	s.Struct.SetUint16(8, 2)
	ss, err := NewPathReply(s.Struct.Segment())
	if err != nil {
		return PathReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReq() (ASInfoReq, error) {
	if s.Struct.Uint16(8) != 3 {
		panic("Which() != asInfoReq")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReq() bool {
	if s.Struct.Uint16(8) != 3 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReq(v ASInfoReq) error {
	s.Struct.SetUint16(8, 3)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReq sets the asInfoReq field to a newly
// allocated ASInfoReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReq() (ASInfoReq, error) {
	s.Struct.SetUint16(8, 3)
	ss, err := NewASInfoReq(s.Struct.Segment())
	if err != nil {
		return ASInfoReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) AsInfoReply() (ASInfoReply, error) {
	if s.Struct.Uint16(8) != 4 {
		panic("Which() != asInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ASInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasAsInfoReply() bool {
	if s.Struct.Uint16(8) != 4 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetAsInfoReply(v ASInfoReply) error {
	s.Struct.SetUint16(8, 4)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewAsInfoReply sets the asInfoReply field to a newly
// allocated ASInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewAsInfoReply() (ASInfoReply, error) {
	s.Struct.SetUint16(8, 4)
	ss, err := NewASInfoReply(s.Struct.Segment())
	if err != nil {
		return ASInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevNotification() (RevNotification, error) {
	if s.Struct.Uint16(8) != 5 {
		panic("Which() != revNotification")
	}
	p, err := s.Struct.Ptr(0)
	return RevNotification{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevNotification() bool {
	if s.Struct.Uint16(8) != 5 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevNotification(v RevNotification) error {
	s.Struct.SetUint16(8, 5)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevNotification sets the revNotification field to a newly
// allocated RevNotification struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevNotification() (RevNotification, error) {
	s.Struct.SetUint16(8, 5)
	ss, err := NewRevNotification(s.Struct.Segment())
	if err != nil {
		return RevNotification{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoRequest() (IFInfoRequest, error) {
	if s.Struct.Uint16(8) != 6 {
		panic("Which() != ifInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoRequest() bool {
	if s.Struct.Uint16(8) != 6 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoRequest(v IFInfoRequest) error {
	s.Struct.SetUint16(8, 6)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoRequest sets the ifInfoRequest field to a newly
// allocated IFInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoRequest() (IFInfoRequest, error) {
	s.Struct.SetUint16(8, 6)
	ss, err := NewIFInfoRequest(s.Struct.Segment())
	if err != nil {
		return IFInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) IfInfoReply() (IFInfoReply, error) {
	if s.Struct.Uint16(8) != 7 {
		panic("Which() != ifInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return IFInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasIfInfoReply() bool {
	if s.Struct.Uint16(8) != 7 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetIfInfoReply(v IFInfoReply) error {
	s.Struct.SetUint16(8, 7)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewIfInfoReply sets the ifInfoReply field to a newly
// allocated IFInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewIfInfoReply() (IFInfoReply, error) {
	s.Struct.SetUint16(8, 7)
	ss, err := NewIFInfoReply(s.Struct.Segment())
	if err != nil {
		return IFInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoRequest() (ServiceInfoRequest, error) {
	if s.Struct.Uint16(8) != 8 {
		panic("Which() != serviceInfoRequest")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoRequest{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoRequest() bool {
	if s.Struct.Uint16(8) != 8 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoRequest(v ServiceInfoRequest) error {
	s.Struct.SetUint16(8, 8)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoRequest sets the serviceInfoRequest field to a newly
// allocated ServiceInfoRequest struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoRequest() (ServiceInfoRequest, error) {
	s.Struct.SetUint16(8, 8)
	ss, err := NewServiceInfoRequest(s.Struct.Segment())
	if err != nil {
		return ServiceInfoRequest{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) ServiceInfoReply() (ServiceInfoReply, error) {
	if s.Struct.Uint16(8) != 9 {
		panic("Which() != serviceInfoReply")
	}
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasServiceInfoReply() bool {
	if s.Struct.Uint16(8) != 9 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetServiceInfoReply(v ServiceInfoReply) error {
	s.Struct.SetUint16(8, 9)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewServiceInfoReply sets the serviceInfoReply field to a newly
// allocated ServiceInfoReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewServiceInfoReply() (ServiceInfoReply, error) {
	s.Struct.SetUint16(8, 9)
	ss, err := NewServiceInfoReply(s.Struct.Segment())
	if err != nil {
		return ServiceInfoReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) RevReply() (RevReply, error) {
	if s.Struct.Uint16(8) != 10 {
		panic("Which() != revReply")
	}
	p, err := s.Struct.Ptr(0)
	return RevReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasRevReply() bool {
	if s.Struct.Uint16(8) != 10 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetRevReply(v RevReply) error {
	s.Struct.SetUint16(8, 10)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewRevReply sets the revReply field to a newly
// allocated RevReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewRevReply() (RevReply, error) {
	s.Struct.SetUint16(8, 10)
	ss, err := NewRevReply(s.Struct.Segment())
	if err != nil {
		return RevReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReq() (SegTypeHopReq, error) {
	if s.Struct.Uint16(8) != 11 {
		panic("Which() != segTypeHopReq")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReq{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReq() bool {
	if s.Struct.Uint16(8) != 11 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReq(v SegTypeHopReq) error {
	s.Struct.SetUint16(8, 11)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReq sets the segTypeHopReq field to a newly
// allocated SegTypeHopReq struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReq() (SegTypeHopReq, error) {
	s.Struct.SetUint16(8, 11)
	ss, err := NewSegTypeHopReq(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReq{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) SegTypeHopReply() (SegTypeHopReply, error) {
	if s.Struct.Uint16(8) != 12 {
		panic("Which() != segTypeHopReply")
	}
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReply{Struct: p.Struct()}, err
}

func (s SCIONDMsg) HasSegTypeHopReply() bool {
	if s.Struct.Uint16(8) != 12 {
		return false
	}
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetSegTypeHopReply(v SegTypeHopReply) error {
	s.Struct.SetUint16(8, 12)
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSegTypeHopReply sets the segTypeHopReply field to a newly
// allocated SegTypeHopReply struct, preferring placement in s's segment.
func (s SCIONDMsg) NewSegTypeHopReply() (SegTypeHopReply, error) {
	s.Struct.SetUint16(8, 12)
	ss, err := NewSegTypeHopReply(s.Struct.Segment())
	if err != nil {
		return SegTypeHopReply{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s SCIONDMsg) TraceId() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s SCIONDMsg) HasTraceId() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s SCIONDMsg) SetTraceId(v []byte) error {
	return s.Struct.SetData(1, v)
}

// SCIONDMsg_List is a list of SCIONDMsg.
type SCIONDMsg_List struct{ capnp.List }

// NewSCIONDMsg creates a new list of SCIONDMsg.
func NewSCIONDMsg_List(s *capnp.Segment, sz int32) (SCIONDMsg_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 2}, sz)
	return SCIONDMsg_List{l}, err
}

func (s SCIONDMsg_List) At(i int) SCIONDMsg { return SCIONDMsg{s.List.Struct(i)} }

func (s SCIONDMsg_List) Set(i int, v SCIONDMsg) error { return s.List.SetStruct(i, v.Struct) }

func (s SCIONDMsg_List) String() string {
	str, _ := text.MarshalList(0x91ea9bb47f46c346, s.List)
	return str
}

// SCIONDMsg_Promise is a wrapper for a SCIONDMsg promised by a client call.
type SCIONDMsg_Promise struct{ *capnp.Pipeline }

func (p SCIONDMsg_Promise) Struct() (SCIONDMsg, error) {
	s, err := p.Pipeline.Struct()
	return SCIONDMsg{s}, err
}

func (p SCIONDMsg_Promise) PathReq() PathReq_Promise {
	return PathReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) PathReply() PathReply_Promise {
	return PathReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReq() ASInfoReq_Promise {
	return ASInfoReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) AsInfoReply() ASInfoReply_Promise {
	return ASInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevNotification() RevNotification_Promise {
	return RevNotification_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoRequest() IFInfoRequest_Promise {
	return IFInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) IfInfoReply() IFInfoReply_Promise {
	return IFInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoRequest() ServiceInfoRequest_Promise {
	return ServiceInfoRequest_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) ServiceInfoReply() ServiceInfoReply_Promise {
	return ServiceInfoReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) RevReply() RevReply_Promise {
	return RevReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReq() SegTypeHopReq_Promise {
	return SegTypeHopReq_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p SCIONDMsg_Promise) SegTypeHopReply() SegTypeHopReply_Promise {
	return SegTypeHopReply_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type PathReq struct{ capnp.Struct }
type PathReq_flags PathReq

// PathReq_TypeID is the unique identifier for the type PathReq.
const PathReq_TypeID = 0xc4c61531dcc4a3eb

func NewPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func NewRootPathReq(s *capnp.Segment) (PathReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1})
	return PathReq{st}, err
}

func ReadRootPathReq(msg *capnp.Message) (PathReq, error) {
	root, err := msg.RootPtr()
	return PathReq{root.Struct()}, err
}

func (s PathReq) String() string {
	str, _ := text.Marshal(0xc4c61531dcc4a3eb, s.Struct)
	return str
}

func (s PathReq) Dst() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathReq) SetDst(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathReq) Src() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathReq) SetSrc(v uint64) {
	s.Struct.SetUint64(8, v)
}

func (s PathReq) MaxPaths() uint16 {
	return s.Struct.Uint16(16)
}

func (s PathReq) SetMaxPaths(v uint16) {
	s.Struct.SetUint16(16, v)
}

func (s PathReq) Flags() PathReq_flags { return PathReq_flags(s) }

func (s PathReq_flags) Refresh() bool {
	return s.Struct.Bit(144)
}

func (s PathReq_flags) SetRefresh(v bool) {
	s.Struct.SetBit(144, v)
}

func (s PathReq_flags) Hidden() bool {
	return s.Struct.Bit(145)
}

func (s PathReq_flags) SetHidden(v bool) {
	s.Struct.SetBit(145, v)
}

func (s PathReq) HpCfgs() (HPGroupId_List, error) {
	p, err := s.Struct.Ptr(0)
	return HPGroupId_List{List: p.List()}, err
}

func (s PathReq) HasHpCfgs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReq) SetHpCfgs(v HPGroupId_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHpCfgs sets the hpCfgs field to a newly
// allocated HPGroupId_List, preferring placement in s's segment.
func (s PathReq) NewHpCfgs(n int32) (HPGroupId_List, error) {
	l, err := NewHPGroupId_List(s.Struct.Segment(), n)
	if err != nil {
		return HPGroupId_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReq_List is a list of PathReq.
type PathReq_List struct{ capnp.List }

// NewPathReq creates a new list of PathReq.
func NewPathReq_List(s *capnp.Segment, sz int32) (PathReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 24, PointerCount: 1}, sz)
	return PathReq_List{l}, err
}

func (s PathReq_List) At(i int) PathReq { return PathReq{s.List.Struct(i)} }

func (s PathReq_List) Set(i int, v PathReq) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReq_List) String() string {
	str, _ := text.MarshalList(0xc4c61531dcc4a3eb, s.List)
	return str
}

// PathReq_Promise is a wrapper for a PathReq promised by a client call.
type PathReq_Promise struct{ *capnp.Pipeline }

func (p PathReq_Promise) Struct() (PathReq, error) {
	s, err := p.Pipeline.Struct()
	return PathReq{s}, err
}

func (p PathReq_Promise) Flags() PathReq_flags_Promise { return PathReq_flags_Promise{p.Pipeline} }

// PathReq_flags_Promise is a wrapper for a PathReq_flags promised by a client call.
type PathReq_flags_Promise struct{ *capnp.Pipeline }

func (p PathReq_flags_Promise) Struct() (PathReq_flags, error) {
	s, err := p.Pipeline.Struct()
	return PathReq_flags{s}, err
}

type PathReply struct{ capnp.Struct }

// PathReply_TypeID is the unique identifier for the type PathReply.
const PathReply_TypeID = 0xf10fe9b6293ee63f

func NewPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func NewRootPathReply(s *capnp.Segment) (PathReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return PathReply{st}, err
}

func ReadRootPathReply(msg *capnp.Message) (PathReply, error) {
	root, err := msg.RootPtr()
	return PathReply{root.Struct()}, err
}

func (s PathReply) String() string {
	str, _ := text.Marshal(0xf10fe9b6293ee63f, s.Struct)
	return str
}

func (s PathReply) ErrorCode() uint16 {
	return s.Struct.Uint16(0)
}

func (s PathReply) SetErrorCode(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s PathReply) Entries() (PathReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathReplyEntry_List{List: p.List()}, err
}

func (s PathReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReply) SetEntries(v PathReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated PathReplyEntry_List, preferring placement in s's segment.
func (s PathReply) NewEntries(n int32) (PathReplyEntry_List, error) {
	l, err := NewPathReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return PathReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// PathReply_List is a list of PathReply.
type PathReply_List struct{ capnp.List }

// NewPathReply creates a new list of PathReply.
func NewPathReply_List(s *capnp.Segment, sz int32) (PathReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return PathReply_List{l}, err
}

func (s PathReply_List) At(i int) PathReply { return PathReply{s.List.Struct(i)} }

func (s PathReply_List) Set(i int, v PathReply) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReply_List) String() string {
	str, _ := text.MarshalList(0xf10fe9b6293ee63f, s.List)
	return str
}

// PathReply_Promise is a wrapper for a PathReply promised by a client call.
type PathReply_Promise struct{ *capnp.Pipeline }

func (p PathReply_Promise) Struct() (PathReply, error) {
	s, err := p.Pipeline.Struct()
	return PathReply{s}, err
}

type PathReplyEntry struct{ capnp.Struct }

// PathReplyEntry_TypeID is the unique identifier for the type PathReplyEntry.
const PathReplyEntry_TypeID = 0xc5ff2e54709776ec

func NewPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathReplyEntry{st}, err
}

func NewRootPathReplyEntry(s *capnp.Segment) (PathReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2})
	return PathReplyEntry{st}, err
}

func ReadRootPathReplyEntry(msg *capnp.Message) (PathReplyEntry, error) {
	root, err := msg.RootPtr()
	return PathReplyEntry{root.Struct()}, err
}

func (s PathReplyEntry) String() string {
	str, _ := text.Marshal(0xc5ff2e54709776ec, s.Struct)
	return str
}

func (s PathReplyEntry) Path() (FwdPathMeta, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetPath(v FwdPathMeta) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewPath sets the path field to a newly
// allocated FwdPathMeta struct, preferring placement in s's segment.
func (s PathReplyEntry) NewPath() (FwdPathMeta, error) {
	ss, err := NewFwdPathMeta(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

func (s PathReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(1)
	return HostInfo{Struct: p.Struct()}, err
}

func (s PathReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s PathReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(1, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s PathReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(1, ss.Struct.ToPtr())
	return ss, err
}

// PathReplyEntry_List is a list of PathReplyEntry.
type PathReplyEntry_List struct{ capnp.List }

// NewPathReplyEntry creates a new list of PathReplyEntry.
func NewPathReplyEntry_List(s *capnp.Segment, sz int32) (PathReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 2}, sz)
	return PathReplyEntry_List{l}, err
}

func (s PathReplyEntry_List) At(i int) PathReplyEntry { return PathReplyEntry{s.List.Struct(i)} }

func (s PathReplyEntry_List) Set(i int, v PathReplyEntry) error { return s.List.SetStruct(i, v.Struct) }

func (s PathReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xc5ff2e54709776ec, s.List)
	return str
}

// PathReplyEntry_Promise is a wrapper for a PathReplyEntry promised by a client call.
type PathReplyEntry_Promise struct{ *capnp.Pipeline }

func (p PathReplyEntry_Promise) Struct() (PathReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return PathReplyEntry{s}, err
}

func (p PathReplyEntry_Promise) Path() FwdPathMeta_Promise {
	return FwdPathMeta_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

func (p PathReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(1)}
}

type HostInfo struct{ capnp.Struct }
type HostInfo_addrs HostInfo

// HostInfo_TypeID is the unique identifier for the type HostInfo.
const HostInfo_TypeID = 0xb21a270577932520

func NewHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func NewRootHostInfo(s *capnp.Segment) (HostInfo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2})
	return HostInfo{st}, err
}

func ReadRootHostInfo(msg *capnp.Message) (HostInfo, error) {
	root, err := msg.RootPtr()
	return HostInfo{root.Struct()}, err
}

func (s HostInfo) String() string {
	str, _ := text.Marshal(0xb21a270577932520, s.Struct)
	return str
}

func (s HostInfo) Port() uint16 {
	return s.Struct.Uint16(0)
}

func (s HostInfo) SetPort(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s HostInfo) Addrs() HostInfo_addrs { return HostInfo_addrs(s) }

func (s HostInfo_addrs) Ipv4() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv4() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv4(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s HostInfo_addrs) Ipv6() ([]byte, error) {
	p, err := s.Struct.Ptr(1)
	return []byte(p.Data()), err
}

func (s HostInfo_addrs) HasIpv6() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s HostInfo_addrs) SetIpv6(v []byte) error {
	return s.Struct.SetData(1, v)
}

// HostInfo_List is a list of HostInfo.
type HostInfo_List struct{ capnp.List }

// NewHostInfo creates a new list of HostInfo.
func NewHostInfo_List(s *capnp.Segment, sz int32) (HostInfo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 2}, sz)
	return HostInfo_List{l}, err
}

func (s HostInfo_List) At(i int) HostInfo { return HostInfo{s.List.Struct(i)} }

func (s HostInfo_List) Set(i int, v HostInfo) error { return s.List.SetStruct(i, v.Struct) }

func (s HostInfo_List) String() string {
	str, _ := text.MarshalList(0xb21a270577932520, s.List)
	return str
}

// HostInfo_Promise is a wrapper for a HostInfo promised by a client call.
type HostInfo_Promise struct{ *capnp.Pipeline }

func (p HostInfo_Promise) Struct() (HostInfo, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo{s}, err
}

func (p HostInfo_Promise) Addrs() HostInfo_addrs_Promise { return HostInfo_addrs_Promise{p.Pipeline} }

// HostInfo_addrs_Promise is a wrapper for a HostInfo_addrs promised by a client call.
type HostInfo_addrs_Promise struct{ *capnp.Pipeline }

func (p HostInfo_addrs_Promise) Struct() (HostInfo_addrs, error) {
	s, err := p.Pipeline.Struct()
	return HostInfo_addrs{s}, err
}

type FwdPathMeta struct{ capnp.Struct }

// FwdPathMeta_TypeID is the unique identifier for the type FwdPathMeta.
const FwdPathMeta_TypeID = 0x8adfcabe5ff9daf4

func NewFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FwdPathMeta{st}, err
}

func NewRootFwdPathMeta(s *capnp.Segment) (FwdPathMeta, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FwdPathMeta{st}, err
}

func ReadRootFwdPathMeta(msg *capnp.Message) (FwdPathMeta, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta{root.Struct()}, err
}

func (s FwdPathMeta) String() string {
	str, _ := text.Marshal(0x8adfcabe5ff9daf4, s.Struct)
	return str
}

func (s FwdPathMeta) FwdPath() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return []byte(p.Data()), err
}

func (s FwdPathMeta) HasFwdPath() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetFwdPath(v []byte) error {
	return s.Struct.SetData(0, v)
}

func (s FwdPathMeta) Mtu() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta) SetMtu(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(1)
	return PathInterface_List{List: p.List()}, err
}

func (s FwdPathMeta) HasInterfaces() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s FwdPathMeta) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s FwdPathMeta) HeaderV2() bool {
	return s.Struct.Bit(16)
}

func (s FwdPathMeta) SetHeaderV2(v bool) {
	s.Struct.SetBit(16, v)
}

func (s FwdPathMeta) Metadata() (FwdPathMeta_PathMetadata, error) {
	p, err := s.Struct.Ptr(2)
	return FwdPathMeta_PathMetadata{Struct: p.Struct()}, err
}

func (s FwdPathMeta) HasMetadata() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta) SetMetadata(v FwdPathMeta_PathMetadata) error {
	return s.Struct.SetPtr(2, v.Struct.ToPtr())
}

// NewMetadata sets the metadata field to a newly
// allocated FwdPathMeta_PathMetadata struct, preferring placement in s's segment.
func (s FwdPathMeta) NewMetadata() (FwdPathMeta_PathMetadata, error) {
	ss, err := NewFwdPathMeta_PathMetadata(s.Struct.Segment())
	if err != nil {
		return FwdPathMeta_PathMetadata{}, err
	}
	err = s.Struct.SetPtr(2, ss.Struct.ToPtr())
	return ss, err
}

// FwdPathMeta_List is a list of FwdPathMeta.
type FwdPathMeta_List struct{ capnp.List }

// NewFwdPathMeta creates a new list of FwdPathMeta.
func NewFwdPathMeta_List(s *capnp.Segment, sz int32) (FwdPathMeta_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return FwdPathMeta_List{l}, err
}

func (s FwdPathMeta_List) At(i int) FwdPathMeta { return FwdPathMeta{s.List.Struct(i)} }

func (s FwdPathMeta_List) Set(i int, v FwdPathMeta) error { return s.List.SetStruct(i, v.Struct) }

func (s FwdPathMeta_List) String() string {
	str, _ := text.MarshalList(0x8adfcabe5ff9daf4, s.List)
	return str
}

// FwdPathMeta_Promise is a wrapper for a FwdPathMeta promised by a client call.
type FwdPathMeta_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_Promise) Struct() (FwdPathMeta, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta{s}, err
}

func (p FwdPathMeta_Promise) Metadata() FwdPathMeta_PathMetadata_Promise {
	return FwdPathMeta_PathMetadata_Promise{Pipeline: p.Pipeline.GetPipeline(2)}
}

type FwdPathMeta_PathMetadata struct{ capnp.Struct }

// FwdPathMeta_PathMetadata_TypeID is the unique identifier for the type FwdPathMeta_PathMetadata.
const FwdPathMeta_PathMetadata_TypeID = 0xb99740136ccf7b24

func NewFwdPathMeta_PathMetadata(s *capnp.Segment) (FwdPathMeta_PathMetadata, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FwdPathMeta_PathMetadata{st}, err
}

func NewRootFwdPathMeta_PathMetadata(s *capnp.Segment) (FwdPathMeta_PathMetadata, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3})
	return FwdPathMeta_PathMetadata{st}, err
}

func ReadRootFwdPathMeta_PathMetadata(msg *capnp.Message) (FwdPathMeta_PathMetadata, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta_PathMetadata{root.Struct()}, err
}

func (s FwdPathMeta_PathMetadata) String() string {
	str, _ := text.Marshal(0xb99740136ccf7b24, s.Struct)
	return str
}

func (s FwdPathMeta_PathMetadata) TotalLatency() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta_PathMetadata) SetTotalLatency(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta_PathMetadata) TotalHops() uint8 {
	return s.Struct.Uint8(2)
}

func (s FwdPathMeta_PathMetadata) SetTotalHops(v uint8) {
	s.Struct.SetUint8(2, v)
}

func (s FwdPathMeta_PathMetadata) MinimalBandwidth() uint32 {
	return s.Struct.Uint32(4)
}

func (s FwdPathMeta_PathMetadata) SetMinimalBandwidth(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s FwdPathMeta_PathMetadata) LinkTypes() (FwdPathMeta_PathMetadata_InterfaceLinkType_List, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta_PathMetadata_InterfaceLinkType_List{List: p.List()}, err
}

func (s FwdPathMeta_PathMetadata) HasLinkTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata) SetLinkTypes(v FwdPathMeta_PathMetadata_InterfaceLinkType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewLinkTypes sets the linkTypes field to a newly
// allocated FwdPathMeta_PathMetadata_InterfaceLinkType_List, preferring placement in s's segment.
func (s FwdPathMeta_PathMetadata) NewLinkTypes(n int32) (FwdPathMeta_PathMetadata_InterfaceLinkType_List, error) {
	l, err := NewFwdPathMeta_PathMetadata_InterfaceLinkType_List(s.Struct.Segment(), n)
	if err != nil {
		return FwdPathMeta_PathMetadata_InterfaceLinkType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta_PathMetadata) AsLocations() (FwdPathMeta_PathMetadata_Geo_List, error) {
	p, err := s.Struct.Ptr(1)
	return FwdPathMeta_PathMetadata_Geo_List{List: p.List()}, err
}

func (s FwdPathMeta_PathMetadata) HasAsLocations() bool {
	p, err := s.Struct.Ptr(1)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata) SetAsLocations(v FwdPathMeta_PathMetadata_Geo_List) error {
	return s.Struct.SetPtr(1, v.List.ToPtr())
}

// NewAsLocations sets the asLocations field to a newly
// allocated FwdPathMeta_PathMetadata_Geo_List, preferring placement in s's segment.
func (s FwdPathMeta_PathMetadata) NewAsLocations(n int32) (FwdPathMeta_PathMetadata_Geo_List, error) {
	l, err := NewFwdPathMeta_PathMetadata_Geo_List(s.Struct.Segment(), n)
	if err != nil {
		return FwdPathMeta_PathMetadata_Geo_List{}, err
	}
	err = s.Struct.SetPtr(1, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta_PathMetadata) Notes() (FwdPathMeta_PathMetadata_Note_List, error) {
	p, err := s.Struct.Ptr(2)
	return FwdPathMeta_PathMetadata_Note_List{List: p.List()}, err
}

func (s FwdPathMeta_PathMetadata) HasNotes() bool {
	p, err := s.Struct.Ptr(2)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata) SetNotes(v FwdPathMeta_PathMetadata_Note_List) error {
	return s.Struct.SetPtr(2, v.List.ToPtr())
}

// NewNotes sets the notes field to a newly
// allocated FwdPathMeta_PathMetadata_Note_List, preferring placement in s's segment.
func (s FwdPathMeta_PathMetadata) NewNotes(n int32) (FwdPathMeta_PathMetadata_Note_List, error) {
	l, err := NewFwdPathMeta_PathMetadata_Note_List(s.Struct.Segment(), n)
	if err != nil {
		return FwdPathMeta_PathMetadata_Note_List{}, err
	}
	err = s.Struct.SetPtr(2, l.List.ToPtr())
	return l, err
}

// FwdPathMeta_PathMetadata_List is a list of FwdPathMeta_PathMetadata.
type FwdPathMeta_PathMetadata_List struct{ capnp.List }

// NewFwdPathMeta_PathMetadata creates a new list of FwdPathMeta_PathMetadata.
func NewFwdPathMeta_PathMetadata_List(s *capnp.Segment, sz int32) (FwdPathMeta_PathMetadata_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 3}, sz)
	return FwdPathMeta_PathMetadata_List{l}, err
}

func (s FwdPathMeta_PathMetadata_List) At(i int) FwdPathMeta_PathMetadata {
	return FwdPathMeta_PathMetadata{s.List.Struct(i)}
}

func (s FwdPathMeta_PathMetadata_List) Set(i int, v FwdPathMeta_PathMetadata) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FwdPathMeta_PathMetadata_List) String() string {
	str, _ := text.MarshalList(0xb99740136ccf7b24, s.List)
	return str
}

// FwdPathMeta_PathMetadata_Promise is a wrapper for a FwdPathMeta_PathMetadata promised by a client call.
type FwdPathMeta_PathMetadata_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_PathMetadata_Promise) Struct() (FwdPathMeta_PathMetadata, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta_PathMetadata{s}, err
}

type FwdPathMeta_PathMetadata_InterfaceLinkType struct{ capnp.Struct }

// FwdPathMeta_PathMetadata_InterfaceLinkType_TypeID is the unique identifier for the type FwdPathMeta_PathMetadata_InterfaceLinkType.
const FwdPathMeta_PathMetadata_InterfaceLinkType_TypeID = 0xebaebf07a47a057a

func NewFwdPathMeta_PathMetadata_InterfaceLinkType(s *capnp.Segment) (FwdPathMeta_PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FwdPathMeta_PathMetadata_InterfaceLinkType{st}, err
}

func NewRootFwdPathMeta_PathMetadata_InterfaceLinkType(s *capnp.Segment) (FwdPathMeta_PathMetadata_InterfaceLinkType, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return FwdPathMeta_PathMetadata_InterfaceLinkType{st}, err
}

func ReadRootFwdPathMeta_PathMetadata_InterfaceLinkType(msg *capnp.Message) (FwdPathMeta_PathMetadata_InterfaceLinkType, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta_PathMetadata_InterfaceLinkType{root.Struct()}, err
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) String() string {
	str, _ := text.Marshal(0xebaebf07a47a057a, s.Struct)
	return str
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) InterLinkType() uint16 {
	return s.Struct.Uint16(0)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) SetInterLinkType(v uint16) {
	s.Struct.SetUint16(0, v)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) PeerLinkType() uint16 {
	return s.Struct.Uint16(2)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) SetPeerLinkType(v uint16) {
	s.Struct.SetUint16(2, v)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) Isdas() uint64 {
	return s.Struct.Uint64(8)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType) SetIsdas(v uint64) {
	s.Struct.SetUint64(8, v)
}

// FwdPathMeta_PathMetadata_InterfaceLinkType_List is a list of FwdPathMeta_PathMetadata_InterfaceLinkType.
type FwdPathMeta_PathMetadata_InterfaceLinkType_List struct{ capnp.List }

// NewFwdPathMeta_PathMetadata_InterfaceLinkType creates a new list of FwdPathMeta_PathMetadata_InterfaceLinkType.
func NewFwdPathMeta_PathMetadata_InterfaceLinkType_List(s *capnp.Segment, sz int32) (FwdPathMeta_PathMetadata_InterfaceLinkType_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return FwdPathMeta_PathMetadata_InterfaceLinkType_List{l}, err
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType_List) At(i int) FwdPathMeta_PathMetadata_InterfaceLinkType {
	return FwdPathMeta_PathMetadata_InterfaceLinkType{s.List.Struct(i)}
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType_List) Set(i int, v FwdPathMeta_PathMetadata_InterfaceLinkType) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FwdPathMeta_PathMetadata_InterfaceLinkType_List) String() string {
	str, _ := text.MarshalList(0xebaebf07a47a057a, s.List)
	return str
}

// FwdPathMeta_PathMetadata_InterfaceLinkType_Promise is a wrapper for a FwdPathMeta_PathMetadata_InterfaceLinkType promised by a client call.
type FwdPathMeta_PathMetadata_InterfaceLinkType_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_PathMetadata_InterfaceLinkType_Promise) Struct() (FwdPathMeta_PathMetadata_InterfaceLinkType, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta_PathMetadata_InterfaceLinkType{s}, err
}

type FwdPathMeta_PathMetadata_Geo struct{ capnp.Struct }

// FwdPathMeta_PathMetadata_Geo_TypeID is the unique identifier for the type FwdPathMeta_PathMetadata_Geo.
const FwdPathMeta_PathMetadata_Geo_TypeID = 0xc843d3d8feb8b782

func NewFwdPathMeta_PathMetadata_Geo(s *capnp.Segment) (FwdPathMeta_PathMetadata_Geo, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Geo{st}, err
}

func NewRootFwdPathMeta_PathMetadata_Geo(s *capnp.Segment) (FwdPathMeta_PathMetadata_Geo, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Geo{st}, err
}

func ReadRootFwdPathMeta_PathMetadata_Geo(msg *capnp.Message) (FwdPathMeta_PathMetadata_Geo, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta_PathMetadata_Geo{root.Struct()}, err
}

func (s FwdPathMeta_PathMetadata_Geo) String() string {
	str, _ := text.Marshal(0xc843d3d8feb8b782, s.Struct)
	return str
}

func (s FwdPathMeta_PathMetadata_Geo) RouterLocations() (FwdPathMeta_PathMetadata_Geo_GPSData_List, error) {
	p, err := s.Struct.Ptr(0)
	return FwdPathMeta_PathMetadata_Geo_GPSData_List{List: p.List()}, err
}

func (s FwdPathMeta_PathMetadata_Geo) HasRouterLocations() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata_Geo) SetRouterLocations(v FwdPathMeta_PathMetadata_Geo_GPSData_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewRouterLocations sets the routerLocations field to a newly
// allocated FwdPathMeta_PathMetadata_Geo_GPSData_List, preferring placement in s's segment.
func (s FwdPathMeta_PathMetadata_Geo) NewRouterLocations(n int32) (FwdPathMeta_PathMetadata_Geo_GPSData_List, error) {
	l, err := NewFwdPathMeta_PathMetadata_Geo_GPSData_List(s.Struct.Segment(), n)
	if err != nil {
		return FwdPathMeta_PathMetadata_Geo_GPSData_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s FwdPathMeta_PathMetadata_Geo) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s FwdPathMeta_PathMetadata_Geo) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// FwdPathMeta_PathMetadata_Geo_List is a list of FwdPathMeta_PathMetadata_Geo.
type FwdPathMeta_PathMetadata_Geo_List struct{ capnp.List }

// NewFwdPathMeta_PathMetadata_Geo creates a new list of FwdPathMeta_PathMetadata_Geo.
func NewFwdPathMeta_PathMetadata_Geo_List(s *capnp.Segment, sz int32) (FwdPathMeta_PathMetadata_Geo_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FwdPathMeta_PathMetadata_Geo_List{l}, err
}

func (s FwdPathMeta_PathMetadata_Geo_List) At(i int) FwdPathMeta_PathMetadata_Geo {
	return FwdPathMeta_PathMetadata_Geo{s.List.Struct(i)}
}

func (s FwdPathMeta_PathMetadata_Geo_List) Set(i int, v FwdPathMeta_PathMetadata_Geo) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FwdPathMeta_PathMetadata_Geo_List) String() string {
	str, _ := text.MarshalList(0xc843d3d8feb8b782, s.List)
	return str
}

// FwdPathMeta_PathMetadata_Geo_Promise is a wrapper for a FwdPathMeta_PathMetadata_Geo promised by a client call.
type FwdPathMeta_PathMetadata_Geo_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_PathMetadata_Geo_Promise) Struct() (FwdPathMeta_PathMetadata_Geo, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta_PathMetadata_Geo{s}, err
}

type FwdPathMeta_PathMetadata_Geo_GPSData struct{ capnp.Struct }

// FwdPathMeta_PathMetadata_Geo_GPSData_TypeID is the unique identifier for the type FwdPathMeta_PathMetadata_Geo_GPSData.
const FwdPathMeta_PathMetadata_Geo_GPSData_TypeID = 0xcb378fe3a1d14ccb

func NewFwdPathMeta_PathMetadata_Geo_GPSData(s *capnp.Segment) (FwdPathMeta_PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Geo_GPSData{st}, err
}

func NewRootFwdPathMeta_PathMetadata_Geo_GPSData(s *capnp.Segment) (FwdPathMeta_PathMetadata_Geo_GPSData, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Geo_GPSData{st}, err
}

func ReadRootFwdPathMeta_PathMetadata_Geo_GPSData(msg *capnp.Message) (FwdPathMeta_PathMetadata_Geo_GPSData, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta_PathMetadata_Geo_GPSData{root.Struct()}, err
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) String() string {
	str, _ := text.Marshal(0xcb378fe3a1d14ccb, s.Struct)
	return str
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) Latitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(0))
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) SetLatitude(v float32) {
	s.Struct.SetUint32(0, math.Float32bits(v))
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) Longitude() float32 {
	return math.Float32frombits(s.Struct.Uint32(4))
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) SetLongitude(v float32) {
	s.Struct.SetUint32(4, math.Float32bits(v))
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) Address() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) HasAddress() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) AddressBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData) SetAddress(v string) error {
	return s.Struct.SetText(0, v)
}

// FwdPathMeta_PathMetadata_Geo_GPSData_List is a list of FwdPathMeta_PathMetadata_Geo_GPSData.
type FwdPathMeta_PathMetadata_Geo_GPSData_List struct{ capnp.List }

// NewFwdPathMeta_PathMetadata_Geo_GPSData creates a new list of FwdPathMeta_PathMetadata_Geo_GPSData.
func NewFwdPathMeta_PathMetadata_Geo_GPSData_List(s *capnp.Segment, sz int32) (FwdPathMeta_PathMetadata_Geo_GPSData_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FwdPathMeta_PathMetadata_Geo_GPSData_List{l}, err
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData_List) At(i int) FwdPathMeta_PathMetadata_Geo_GPSData {
	return FwdPathMeta_PathMetadata_Geo_GPSData{s.List.Struct(i)}
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData_List) Set(i int, v FwdPathMeta_PathMetadata_Geo_GPSData) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FwdPathMeta_PathMetadata_Geo_GPSData_List) String() string {
	str, _ := text.MarshalList(0xcb378fe3a1d14ccb, s.List)
	return str
}

// FwdPathMeta_PathMetadata_Geo_GPSData_Promise is a wrapper for a FwdPathMeta_PathMetadata_Geo_GPSData promised by a client call.
type FwdPathMeta_PathMetadata_Geo_GPSData_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_PathMetadata_Geo_GPSData_Promise) Struct() (FwdPathMeta_PathMetadata_Geo_GPSData, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta_PathMetadata_Geo_GPSData{s}, err
}

type FwdPathMeta_PathMetadata_Note struct{ capnp.Struct }

// FwdPathMeta_PathMetadata_Note_TypeID is the unique identifier for the type FwdPathMeta_PathMetadata_Note.
const FwdPathMeta_PathMetadata_Note_TypeID = 0xb6ca98e8bbb81d2e

func NewFwdPathMeta_PathMetadata_Note(s *capnp.Segment) (FwdPathMeta_PathMetadata_Note, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Note{st}, err
}

func NewRootFwdPathMeta_PathMetadata_Note(s *capnp.Segment) (FwdPathMeta_PathMetadata_Note, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return FwdPathMeta_PathMetadata_Note{st}, err
}

func ReadRootFwdPathMeta_PathMetadata_Note(msg *capnp.Message) (FwdPathMeta_PathMetadata_Note, error) {
	root, err := msg.RootPtr()
	return FwdPathMeta_PathMetadata_Note{root.Struct()}, err
}

func (s FwdPathMeta_PathMetadata_Note) String() string {
	str, _ := text.Marshal(0xb6ca98e8bbb81d2e, s.Struct)
	return str
}

func (s FwdPathMeta_PathMetadata_Note) Note() (string, error) {
	p, err := s.Struct.Ptr(0)
	return p.Text(), err
}

func (s FwdPathMeta_PathMetadata_Note) HasNote() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s FwdPathMeta_PathMetadata_Note) NoteBytes() ([]byte, error) {
	p, err := s.Struct.Ptr(0)
	return p.TextBytes(), err
}

func (s FwdPathMeta_PathMetadata_Note) SetNote(v string) error {
	return s.Struct.SetText(0, v)
}

func (s FwdPathMeta_PathMetadata_Note) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s FwdPathMeta_PathMetadata_Note) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// FwdPathMeta_PathMetadata_Note_List is a list of FwdPathMeta_PathMetadata_Note.
type FwdPathMeta_PathMetadata_Note_List struct{ capnp.List }

// NewFwdPathMeta_PathMetadata_Note creates a new list of FwdPathMeta_PathMetadata_Note.
func NewFwdPathMeta_PathMetadata_Note_List(s *capnp.Segment, sz int32) (FwdPathMeta_PathMetadata_Note_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return FwdPathMeta_PathMetadata_Note_List{l}, err
}

func (s FwdPathMeta_PathMetadata_Note_List) At(i int) FwdPathMeta_PathMetadata_Note {
	return FwdPathMeta_PathMetadata_Note{s.List.Struct(i)}
}

func (s FwdPathMeta_PathMetadata_Note_List) Set(i int, v FwdPathMeta_PathMetadata_Note) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s FwdPathMeta_PathMetadata_Note_List) String() string {
	str, _ := text.MarshalList(0xb6ca98e8bbb81d2e, s.List)
	return str
}

// FwdPathMeta_PathMetadata_Note_Promise is a wrapper for a FwdPathMeta_PathMetadata_Note promised by a client call.
type FwdPathMeta_PathMetadata_Note_Promise struct{ *capnp.Pipeline }

func (p FwdPathMeta_PathMetadata_Note_Promise) Struct() (FwdPathMeta_PathMetadata_Note, error) {
	s, err := p.Pipeline.Struct()
	return FwdPathMeta_PathMetadata_Note{s}, err
}

type PathInterface struct{ capnp.Struct }

// PathInterface_TypeID is the unique identifier for the type PathInterface.
const PathInterface_TypeID = 0x95794035a80b7da1

func NewPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func NewRootPathInterface(s *capnp.Segment) (PathInterface, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return PathInterface{st}, err
}

func ReadRootPathInterface(msg *capnp.Message) (PathInterface, error) {
	root, err := msg.RootPtr()
	return PathInterface{root.Struct()}, err
}

func (s PathInterface) String() string {
	str, _ := text.Marshal(0x95794035a80b7da1, s.Struct)
	return str
}

func (s PathInterface) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s PathInterface) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s PathInterface) IfID() uint64 {
	return s.Struct.Uint64(8)
}

func (s PathInterface) SetIfID(v uint64) {
	s.Struct.SetUint64(8, v)
}

// PathInterface_List is a list of PathInterface.
type PathInterface_List struct{ capnp.List }

// NewPathInterface creates a new list of PathInterface.
func NewPathInterface_List(s *capnp.Segment, sz int32) (PathInterface_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return PathInterface_List{l}, err
}

func (s PathInterface_List) At(i int) PathInterface { return PathInterface{s.List.Struct(i)} }

func (s PathInterface_List) Set(i int, v PathInterface) error { return s.List.SetStruct(i, v.Struct) }

func (s PathInterface_List) String() string {
	str, _ := text.MarshalList(0x95794035a80b7da1, s.List)
	return str
}

// PathInterface_Promise is a wrapper for a PathInterface promised by a client call.
type PathInterface_Promise struct{ *capnp.Pipeline }

func (p PathInterface_Promise) Struct() (PathInterface, error) {
	s, err := p.Pipeline.Struct()
	return PathInterface{s}, err
}

type ASInfoReq struct{ capnp.Struct }

// ASInfoReq_TypeID is the unique identifier for the type ASInfoReq.
const ASInfoReq_TypeID = 0xcc65a2a89c24e6a5

func NewASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func NewRootASInfoReq(s *capnp.Segment) (ASInfoReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return ASInfoReq{st}, err
}

func ReadRootASInfoReq(msg *capnp.Message) (ASInfoReq, error) {
	root, err := msg.RootPtr()
	return ASInfoReq{root.Struct()}, err
}

func (s ASInfoReq) String() string {
	str, _ := text.Marshal(0xcc65a2a89c24e6a5, s.Struct)
	return str
}

func (s ASInfoReq) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReq) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

// ASInfoReq_List is a list of ASInfoReq.
type ASInfoReq_List struct{ capnp.List }

// NewASInfoReq creates a new list of ASInfoReq.
func NewASInfoReq_List(s *capnp.Segment, sz int32) (ASInfoReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return ASInfoReq_List{l}, err
}

func (s ASInfoReq_List) At(i int) ASInfoReq { return ASInfoReq{s.List.Struct(i)} }

func (s ASInfoReq_List) Set(i int, v ASInfoReq) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReq_List) String() string {
	str, _ := text.MarshalList(0xcc65a2a89c24e6a5, s.List)
	return str
}

// ASInfoReq_Promise is a wrapper for a ASInfoReq promised by a client call.
type ASInfoReq_Promise struct{ *capnp.Pipeline }

func (p ASInfoReq_Promise) Struct() (ASInfoReq, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReq{s}, err
}

type ASInfoReply struct{ capnp.Struct }

// ASInfoReply_TypeID is the unique identifier for the type ASInfoReply.
const ASInfoReply_TypeID = 0x947e1828e214e89d

func NewASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func NewRootASInfoReply(s *capnp.Segment) (ASInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ASInfoReply{st}, err
}

func ReadRootASInfoReply(msg *capnp.Message) (ASInfoReply, error) {
	root, err := msg.RootPtr()
	return ASInfoReply{root.Struct()}, err
}

func (s ASInfoReply) String() string {
	str, _ := text.Marshal(0x947e1828e214e89d, s.Struct)
	return str
}

func (s ASInfoReply) Entries() (ASInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ASInfoReplyEntry_List{List: p.List()}, err
}

func (s ASInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ASInfoReply) SetEntries(v ASInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ASInfoReplyEntry_List, preferring placement in s's segment.
func (s ASInfoReply) NewEntries(n int32) (ASInfoReplyEntry_List, error) {
	l, err := NewASInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ASInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ASInfoReply_List is a list of ASInfoReply.
type ASInfoReply_List struct{ capnp.List }

// NewASInfoReply creates a new list of ASInfoReply.
func NewASInfoReply_List(s *capnp.Segment, sz int32) (ASInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ASInfoReply_List{l}, err
}

func (s ASInfoReply_List) At(i int) ASInfoReply { return ASInfoReply{s.List.Struct(i)} }

func (s ASInfoReply_List) Set(i int, v ASInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s ASInfoReply_List) String() string {
	str, _ := text.MarshalList(0x947e1828e214e89d, s.List)
	return str
}

// ASInfoReply_Promise is a wrapper for a ASInfoReply promised by a client call.
type ASInfoReply_Promise struct{ *capnp.Pipeline }

func (p ASInfoReply_Promise) Struct() (ASInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReply{s}, err
}

type ASInfoReplyEntry struct{ capnp.Struct }

// ASInfoReplyEntry_TypeID is the unique identifier for the type ASInfoReplyEntry.
const ASInfoReplyEntry_TypeID = 0xfab1a3b4477ab6b3

func NewASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func NewRootASInfoReplyEntry(s *capnp.Segment) (ASInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0})
	return ASInfoReplyEntry{st}, err
}

func ReadRootASInfoReplyEntry(msg *capnp.Message) (ASInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ASInfoReplyEntry{root.Struct()}, err
}

func (s ASInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xfab1a3b4477ab6b3, s.Struct)
	return str
}

func (s ASInfoReplyEntry) Isdas() uint64 {
	return s.Struct.Uint64(0)
}

func (s ASInfoReplyEntry) SetIsdas(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s ASInfoReplyEntry) Mtu() uint16 {
	return s.Struct.Uint16(8)
}

func (s ASInfoReplyEntry) SetMtu(v uint16) {
	s.Struct.SetUint16(8, v)
}

func (s ASInfoReplyEntry) IsCore() bool {
	return s.Struct.Bit(80)
}

func (s ASInfoReplyEntry) SetIsCore(v bool) {
	s.Struct.SetBit(80, v)
}

// ASInfoReplyEntry_List is a list of ASInfoReplyEntry.
type ASInfoReplyEntry_List struct{ capnp.List }

// NewASInfoReplyEntry creates a new list of ASInfoReplyEntry.
func NewASInfoReplyEntry_List(s *capnp.Segment, sz int32) (ASInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 16, PointerCount: 0}, sz)
	return ASInfoReplyEntry_List{l}, err
}

func (s ASInfoReplyEntry_List) At(i int) ASInfoReplyEntry { return ASInfoReplyEntry{s.List.Struct(i)} }

func (s ASInfoReplyEntry_List) Set(i int, v ASInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ASInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xfab1a3b4477ab6b3, s.List)
	return str
}

// ASInfoReplyEntry_Promise is a wrapper for a ASInfoReplyEntry promised by a client call.
type ASInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ASInfoReplyEntry_Promise) Struct() (ASInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ASInfoReplyEntry{s}, err
}

type RevNotification struct{ capnp.Struct }

// RevNotification_TypeID is the unique identifier for the type RevNotification.
const RevNotification_TypeID = 0x9b0685a785df42e9

func NewRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func NewRootRevNotification(s *capnp.Segment) (RevNotification, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return RevNotification{st}, err
}

func ReadRootRevNotification(msg *capnp.Message) (RevNotification, error) {
	root, err := msg.RootPtr()
	return RevNotification{root.Struct()}, err
}

func (s RevNotification) String() string {
	str, _ := text.Marshal(0x9b0685a785df42e9, s.Struct)
	return str
}

func (s RevNotification) SRevInfo() (SignedBlob, error) {
	p, err := s.Struct.Ptr(0)
	return SignedBlob{Struct: p.Struct()}, err
}

func (s RevNotification) HasSRevInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s RevNotification) SetSRevInfo(v SignedBlob) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewSRevInfo sets the sRevInfo field to a newly
// allocated SignedBlob struct, preferring placement in s's segment.
func (s RevNotification) NewSRevInfo() (SignedBlob, error) {
	ss, err := NewSignedBlob(s.Struct.Segment())
	if err != nil {
		return SignedBlob{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// RevNotification_List is a list of RevNotification.
type RevNotification_List struct{ capnp.List }

// NewRevNotification creates a new list of RevNotification.
func NewRevNotification_List(s *capnp.Segment, sz int32) (RevNotification_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return RevNotification_List{l}, err
}

func (s RevNotification_List) At(i int) RevNotification { return RevNotification{s.List.Struct(i)} }

func (s RevNotification_List) Set(i int, v RevNotification) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s RevNotification_List) String() string {
	str, _ := text.MarshalList(0x9b0685a785df42e9, s.List)
	return str
}

// RevNotification_Promise is a wrapper for a RevNotification promised by a client call.
type RevNotification_Promise struct{ *capnp.Pipeline }

func (p RevNotification_Promise) Struct() (RevNotification, error) {
	s, err := p.Pipeline.Struct()
	return RevNotification{s}, err
}

func (p RevNotification_Promise) SRevInfo() SignedBlob_Promise {
	return SignedBlob_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type RevReply struct{ capnp.Struct }

// RevReply_TypeID is the unique identifier for the type RevReply.
const RevReply_TypeID = 0x8f8172e4469c111a

func NewRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func NewRootRevReply(s *capnp.Segment) (RevReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return RevReply{st}, err
}

func ReadRootRevReply(msg *capnp.Message) (RevReply, error) {
	root, err := msg.RootPtr()
	return RevReply{root.Struct()}, err
}

func (s RevReply) String() string {
	str, _ := text.Marshal(0x8f8172e4469c111a, s.Struct)
	return str
}

func (s RevReply) Result() uint16 {
	return s.Struct.Uint16(0)
}

func (s RevReply) SetResult(v uint16) {
	s.Struct.SetUint16(0, v)
}

// RevReply_List is a list of RevReply.
type RevReply_List struct{ capnp.List }

// NewRevReply creates a new list of RevReply.
func NewRevReply_List(s *capnp.Segment, sz int32) (RevReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return RevReply_List{l}, err
}

func (s RevReply_List) At(i int) RevReply { return RevReply{s.List.Struct(i)} }

func (s RevReply_List) Set(i int, v RevReply) error { return s.List.SetStruct(i, v.Struct) }

func (s RevReply_List) String() string {
	str, _ := text.MarshalList(0x8f8172e4469c111a, s.List)
	return str
}

// RevReply_Promise is a wrapper for a RevReply promised by a client call.
type RevReply_Promise struct{ *capnp.Pipeline }

func (p RevReply_Promise) Struct() (RevReply, error) {
	s, err := p.Pipeline.Struct()
	return RevReply{s}, err
}

type IFInfoRequest struct{ capnp.Struct }

// IFInfoRequest_TypeID is the unique identifier for the type IFInfoRequest.
const IFInfoRequest_TypeID = 0x877af4eba6adb0f3

func NewIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func NewRootIFInfoRequest(s *capnp.Segment) (IFInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoRequest{st}, err
}

func ReadRootIFInfoRequest(msg *capnp.Message) (IFInfoRequest, error) {
	root, err := msg.RootPtr()
	return IFInfoRequest{root.Struct()}, err
}

func (s IFInfoRequest) String() string {
	str, _ := text.Marshal(0x877af4eba6adb0f3, s.Struct)
	return str
}

func (s IFInfoRequest) IfIDs() (capnp.UInt64List, error) {
	p, err := s.Struct.Ptr(0)
	return capnp.UInt64List{List: p.List()}, err
}

func (s IFInfoRequest) HasIfIDs() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoRequest) SetIfIDs(v capnp.UInt64List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewIfIDs sets the ifIDs field to a newly
// allocated capnp.UInt64List, preferring placement in s's segment.
func (s IFInfoRequest) NewIfIDs(n int32) (capnp.UInt64List, error) {
	l, err := capnp.NewUInt64List(s.Struct.Segment(), n)
	if err != nil {
		return capnp.UInt64List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoRequest_List is a list of IFInfoRequest.
type IFInfoRequest_List struct{ capnp.List }

// NewIFInfoRequest creates a new list of IFInfoRequest.
func NewIFInfoRequest_List(s *capnp.Segment, sz int32) (IFInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoRequest_List{l}, err
}

func (s IFInfoRequest_List) At(i int) IFInfoRequest { return IFInfoRequest{s.List.Struct(i)} }

func (s IFInfoRequest_List) Set(i int, v IFInfoRequest) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoRequest_List) String() string {
	str, _ := text.MarshalList(0x877af4eba6adb0f3, s.List)
	return str
}

// IFInfoRequest_Promise is a wrapper for a IFInfoRequest promised by a client call.
type IFInfoRequest_Promise struct{ *capnp.Pipeline }

func (p IFInfoRequest_Promise) Struct() (IFInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoRequest{s}, err
}

type IFInfoReply struct{ capnp.Struct }

// IFInfoReply_TypeID is the unique identifier for the type IFInfoReply.
const IFInfoReply_TypeID = 0xe7f7d11a5652e06c

func NewIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func NewRootIFInfoReply(s *capnp.Segment) (IFInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return IFInfoReply{st}, err
}

func ReadRootIFInfoReply(msg *capnp.Message) (IFInfoReply, error) {
	root, err := msg.RootPtr()
	return IFInfoReply{root.Struct()}, err
}

func (s IFInfoReply) String() string {
	str, _ := text.Marshal(0xe7f7d11a5652e06c, s.Struct)
	return str
}

func (s IFInfoReply) Entries() (IFInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return IFInfoReplyEntry_List{List: p.List()}, err
}

func (s IFInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReply) SetEntries(v IFInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated IFInfoReplyEntry_List, preferring placement in s's segment.
func (s IFInfoReply) NewEntries(n int32) (IFInfoReplyEntry_List, error) {
	l, err := NewIFInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return IFInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// IFInfoReply_List is a list of IFInfoReply.
type IFInfoReply_List struct{ capnp.List }

// NewIFInfoReply creates a new list of IFInfoReply.
func NewIFInfoReply_List(s *capnp.Segment, sz int32) (IFInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return IFInfoReply_List{l}, err
}

func (s IFInfoReply_List) At(i int) IFInfoReply { return IFInfoReply{s.List.Struct(i)} }

func (s IFInfoReply_List) Set(i int, v IFInfoReply) error { return s.List.SetStruct(i, v.Struct) }

func (s IFInfoReply_List) String() string {
	str, _ := text.MarshalList(0xe7f7d11a5652e06c, s.List)
	return str
}

// IFInfoReply_Promise is a wrapper for a IFInfoReply promised by a client call.
type IFInfoReply_Promise struct{ *capnp.Pipeline }

func (p IFInfoReply_Promise) Struct() (IFInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReply{s}, err
}

type IFInfoReplyEntry struct{ capnp.Struct }

// IFInfoReplyEntry_TypeID is the unique identifier for the type IFInfoReplyEntry.
const IFInfoReplyEntry_TypeID = 0xf0c5156786d72738

func NewIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func NewRootIFInfoReplyEntry(s *capnp.Segment) (IFInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return IFInfoReplyEntry{st}, err
}

func ReadRootIFInfoReplyEntry(msg *capnp.Message) (IFInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return IFInfoReplyEntry{root.Struct()}, err
}

func (s IFInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xf0c5156786d72738, s.Struct)
	return str
}

func (s IFInfoReplyEntry) IfID() uint64 {
	return s.Struct.Uint64(0)
}

func (s IFInfoReplyEntry) SetIfID(v uint64) {
	s.Struct.SetUint64(0, v)
}

func (s IFInfoReplyEntry) HostInfo() (HostInfo, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo{Struct: p.Struct()}, err
}

func (s IFInfoReplyEntry) HasHostInfo() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s IFInfoReplyEntry) SetHostInfo(v HostInfo) error {
	return s.Struct.SetPtr(0, v.Struct.ToPtr())
}

// NewHostInfo sets the hostInfo field to a newly
// allocated HostInfo struct, preferring placement in s's segment.
func (s IFInfoReplyEntry) NewHostInfo() (HostInfo, error) {
	ss, err := NewHostInfo(s.Struct.Segment())
	if err != nil {
		return HostInfo{}, err
	}
	err = s.Struct.SetPtr(0, ss.Struct.ToPtr())
	return ss, err
}

// IFInfoReplyEntry_List is a list of IFInfoReplyEntry.
type IFInfoReplyEntry_List struct{ capnp.List }

// NewIFInfoReplyEntry creates a new list of IFInfoReplyEntry.
func NewIFInfoReplyEntry_List(s *capnp.Segment, sz int32) (IFInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return IFInfoReplyEntry_List{l}, err
}

func (s IFInfoReplyEntry_List) At(i int) IFInfoReplyEntry { return IFInfoReplyEntry{s.List.Struct(i)} }

func (s IFInfoReplyEntry_List) Set(i int, v IFInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s IFInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xf0c5156786d72738, s.List)
	return str
}

// IFInfoReplyEntry_Promise is a wrapper for a IFInfoReplyEntry promised by a client call.
type IFInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p IFInfoReplyEntry_Promise) Struct() (IFInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return IFInfoReplyEntry{s}, err
}

func (p IFInfoReplyEntry_Promise) HostInfo() HostInfo_Promise {
	return HostInfo_Promise{Pipeline: p.Pipeline.GetPipeline(0)}
}

type ServiceInfoRequest struct{ capnp.Struct }

// ServiceInfoRequest_TypeID is the unique identifier for the type ServiceInfoRequest.
const ServiceInfoRequest_TypeID = 0xa94f085c31a03112

func NewServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func NewRootServiceInfoRequest(s *capnp.Segment) (ServiceInfoRequest, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoRequest{st}, err
}

func ReadRootServiceInfoRequest(msg *capnp.Message) (ServiceInfoRequest, error) {
	root, err := msg.RootPtr()
	return ServiceInfoRequest{root.Struct()}, err
}

func (s ServiceInfoRequest) String() string {
	str, _ := text.Marshal(0xa94f085c31a03112, s.Struct)
	return str
}

func (s ServiceInfoRequest) ServiceTypes() (ServiceType_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceType_List{List: p.List()}, err
}

func (s ServiceInfoRequest) HasServiceTypes() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoRequest) SetServiceTypes(v ServiceType_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewServiceTypes sets the serviceTypes field to a newly
// allocated ServiceType_List, preferring placement in s's segment.
func (s ServiceInfoRequest) NewServiceTypes(n int32) (ServiceType_List, error) {
	l, err := NewServiceType_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceType_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoRequest_List is a list of ServiceInfoRequest.
type ServiceInfoRequest_List struct{ capnp.List }

// NewServiceInfoRequest creates a new list of ServiceInfoRequest.
func NewServiceInfoRequest_List(s *capnp.Segment, sz int32) (ServiceInfoRequest_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoRequest_List{l}, err
}

func (s ServiceInfoRequest_List) At(i int) ServiceInfoRequest {
	return ServiceInfoRequest{s.List.Struct(i)}
}

func (s ServiceInfoRequest_List) Set(i int, v ServiceInfoRequest) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoRequest_List) String() string {
	str, _ := text.MarshalList(0xa94f085c31a03112, s.List)
	return str
}

// ServiceInfoRequest_Promise is a wrapper for a ServiceInfoRequest promised by a client call.
type ServiceInfoRequest_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoRequest_Promise) Struct() (ServiceInfoRequest, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoRequest{s}, err
}

type ServiceInfoReply struct{ capnp.Struct }

// ServiceInfoReply_TypeID is the unique identifier for the type ServiceInfoReply.
const ServiceInfoReply_TypeID = 0xf7a6d78ba978beb9

func NewServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func NewRootServiceInfoReply(s *capnp.Segment) (ServiceInfoReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return ServiceInfoReply{st}, err
}

func ReadRootServiceInfoReply(msg *capnp.Message) (ServiceInfoReply, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReply{root.Struct()}, err
}

func (s ServiceInfoReply) String() string {
	str, _ := text.Marshal(0xf7a6d78ba978beb9, s.Struct)
	return str
}

func (s ServiceInfoReply) Entries() (ServiceInfoReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return ServiceInfoReplyEntry_List{List: p.List()}, err
}

func (s ServiceInfoReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReply) SetEntries(v ServiceInfoReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated ServiceInfoReplyEntry_List, preferring placement in s's segment.
func (s ServiceInfoReply) NewEntries(n int32) (ServiceInfoReplyEntry_List, error) {
	l, err := NewServiceInfoReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return ServiceInfoReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReply_List is a list of ServiceInfoReply.
type ServiceInfoReply_List struct{ capnp.List }

// NewServiceInfoReply creates a new list of ServiceInfoReply.
func NewServiceInfoReply_List(s *capnp.Segment, sz int32) (ServiceInfoReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return ServiceInfoReply_List{l}, err
}

func (s ServiceInfoReply_List) At(i int) ServiceInfoReply { return ServiceInfoReply{s.List.Struct(i)} }

func (s ServiceInfoReply_List) Set(i int, v ServiceInfoReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReply_List) String() string {
	str, _ := text.MarshalList(0xf7a6d78ba978beb9, s.List)
	return str
}

// ServiceInfoReply_Promise is a wrapper for a ServiceInfoReply promised by a client call.
type ServiceInfoReply_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReply_Promise) Struct() (ServiceInfoReply, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReply{s}, err
}

type ServiceInfoReplyEntry struct{ capnp.Struct }

// ServiceInfoReplyEntry_TypeID is the unique identifier for the type ServiceInfoReplyEntry.
const ServiceInfoReplyEntry_TypeID = 0xe7279389a6bbe1dc

func NewServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func NewRootServiceInfoReplyEntry(s *capnp.Segment) (ServiceInfoReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return ServiceInfoReplyEntry{st}, err
}

func ReadRootServiceInfoReplyEntry(msg *capnp.Message) (ServiceInfoReplyEntry, error) {
	root, err := msg.RootPtr()
	return ServiceInfoReplyEntry{root.Struct()}, err
}

func (s ServiceInfoReplyEntry) String() string {
	str, _ := text.Marshal(0xe7279389a6bbe1dc, s.Struct)
	return str
}

func (s ServiceInfoReplyEntry) ServiceType() ServiceType {
	return ServiceType(s.Struct.Uint16(0))
}

func (s ServiceInfoReplyEntry) SetServiceType(v ServiceType) {
	s.Struct.SetUint16(0, uint16(v))
}

func (s ServiceInfoReplyEntry) Ttl() uint32 {
	return s.Struct.Uint32(4)
}

func (s ServiceInfoReplyEntry) SetTtl(v uint32) {
	s.Struct.SetUint32(4, v)
}

func (s ServiceInfoReplyEntry) HostInfos() (HostInfo_List, error) {
	p, err := s.Struct.Ptr(0)
	return HostInfo_List{List: p.List()}, err
}

func (s ServiceInfoReplyEntry) HasHostInfos() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s ServiceInfoReplyEntry) SetHostInfos(v HostInfo_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewHostInfos sets the hostInfos field to a newly
// allocated HostInfo_List, preferring placement in s's segment.
func (s ServiceInfoReplyEntry) NewHostInfos(n int32) (HostInfo_List, error) {
	l, err := NewHostInfo_List(s.Struct.Segment(), n)
	if err != nil {
		return HostInfo_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// ServiceInfoReplyEntry_List is a list of ServiceInfoReplyEntry.
type ServiceInfoReplyEntry_List struct{ capnp.List }

// NewServiceInfoReplyEntry creates a new list of ServiceInfoReplyEntry.
func NewServiceInfoReplyEntry_List(s *capnp.Segment, sz int32) (ServiceInfoReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return ServiceInfoReplyEntry_List{l}, err
}

func (s ServiceInfoReplyEntry_List) At(i int) ServiceInfoReplyEntry {
	return ServiceInfoReplyEntry{s.List.Struct(i)}
}

func (s ServiceInfoReplyEntry_List) Set(i int, v ServiceInfoReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s ServiceInfoReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xe7279389a6bbe1dc, s.List)
	return str
}

// ServiceInfoReplyEntry_Promise is a wrapper for a ServiceInfoReplyEntry promised by a client call.
type ServiceInfoReplyEntry_Promise struct{ *capnp.Pipeline }

func (p ServiceInfoReplyEntry_Promise) Struct() (ServiceInfoReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return ServiceInfoReplyEntry{s}, err
}

type SegTypeHopReq struct{ capnp.Struct }

// SegTypeHopReq_TypeID is the unique identifier for the type SegTypeHopReq.
const SegTypeHopReq_TypeID = 0xca1e844241cf650f

func NewSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func NewRootSegTypeHopReq(s *capnp.Segment) (SegTypeHopReq, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0})
	return SegTypeHopReq{st}, err
}

func ReadRootSegTypeHopReq(msg *capnp.Message) (SegTypeHopReq, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReq{root.Struct()}, err
}

func (s SegTypeHopReq) String() string {
	str, _ := text.Marshal(0xca1e844241cf650f, s.Struct)
	return str
}

func (s SegTypeHopReq) Type() PathSegType {
	return PathSegType(s.Struct.Uint16(0))
}

func (s SegTypeHopReq) SetType(v PathSegType) {
	s.Struct.SetUint16(0, uint16(v))
}

// SegTypeHopReq_List is a list of SegTypeHopReq.
type SegTypeHopReq_List struct{ capnp.List }

// NewSegTypeHopReq creates a new list of SegTypeHopReq.
func NewSegTypeHopReq_List(s *capnp.Segment, sz int32) (SegTypeHopReq_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 0}, sz)
	return SegTypeHopReq_List{l}, err
}

func (s SegTypeHopReq_List) At(i int) SegTypeHopReq { return SegTypeHopReq{s.List.Struct(i)} }

func (s SegTypeHopReq_List) Set(i int, v SegTypeHopReq) error { return s.List.SetStruct(i, v.Struct) }

func (s SegTypeHopReq_List) String() string {
	str, _ := text.MarshalList(0xca1e844241cf650f, s.List)
	return str
}

// SegTypeHopReq_Promise is a wrapper for a SegTypeHopReq promised by a client call.
type SegTypeHopReq_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReq_Promise) Struct() (SegTypeHopReq, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReq{s}, err
}

type SegTypeHopReply struct{ capnp.Struct }

// SegTypeHopReply_TypeID is the unique identifier for the type SegTypeHopReply.
const SegTypeHopReply_TypeID = 0xc340ede57616f2e8

func NewSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func NewRootSegTypeHopReply(s *capnp.Segment) (SegTypeHopReply, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1})
	return SegTypeHopReply{st}, err
}

func ReadRootSegTypeHopReply(msg *capnp.Message) (SegTypeHopReply, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReply{root.Struct()}, err
}

func (s SegTypeHopReply) String() string {
	str, _ := text.Marshal(0xc340ede57616f2e8, s.Struct)
	return str
}

func (s SegTypeHopReply) Entries() (SegTypeHopReplyEntry_List, error) {
	p, err := s.Struct.Ptr(0)
	return SegTypeHopReplyEntry_List{List: p.List()}, err
}

func (s SegTypeHopReply) HasEntries() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReply) SetEntries(v SegTypeHopReplyEntry_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewEntries sets the entries field to a newly
// allocated SegTypeHopReplyEntry_List, preferring placement in s's segment.
func (s SegTypeHopReply) NewEntries(n int32) (SegTypeHopReplyEntry_List, error) {
	l, err := NewSegTypeHopReplyEntry_List(s.Struct.Segment(), n)
	if err != nil {
		return SegTypeHopReplyEntry_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

// SegTypeHopReply_List is a list of SegTypeHopReply.
type SegTypeHopReply_List struct{ capnp.List }

// NewSegTypeHopReply creates a new list of SegTypeHopReply.
func NewSegTypeHopReply_List(s *capnp.Segment, sz int32) (SegTypeHopReply_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 0, PointerCount: 1}, sz)
	return SegTypeHopReply_List{l}, err
}

func (s SegTypeHopReply_List) At(i int) SegTypeHopReply { return SegTypeHopReply{s.List.Struct(i)} }

func (s SegTypeHopReply_List) Set(i int, v SegTypeHopReply) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReply_List) String() string {
	str, _ := text.MarshalList(0xc340ede57616f2e8, s.List)
	return str
}

// SegTypeHopReply_Promise is a wrapper for a SegTypeHopReply promised by a client call.
type SegTypeHopReply_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReply_Promise) Struct() (SegTypeHopReply, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReply{s}, err
}

type SegTypeHopReplyEntry struct{ capnp.Struct }

// SegTypeHopReplyEntry_TypeID is the unique identifier for the type SegTypeHopReplyEntry.
const SegTypeHopReplyEntry_TypeID = 0xacf8185a51a9f1b4

func NewSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func NewRootSegTypeHopReplyEntry(s *capnp.Segment) (SegTypeHopReplyEntry, error) {
	st, err := capnp.NewRootStruct(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1})
	return SegTypeHopReplyEntry{st}, err
}

func ReadRootSegTypeHopReplyEntry(msg *capnp.Message) (SegTypeHopReplyEntry, error) {
	root, err := msg.RootPtr()
	return SegTypeHopReplyEntry{root.Struct()}, err
}

func (s SegTypeHopReplyEntry) String() string {
	str, _ := text.Marshal(0xacf8185a51a9f1b4, s.Struct)
	return str
}

func (s SegTypeHopReplyEntry) Interfaces() (PathInterface_List, error) {
	p, err := s.Struct.Ptr(0)
	return PathInterface_List{List: p.List()}, err
}

func (s SegTypeHopReplyEntry) HasInterfaces() bool {
	p, err := s.Struct.Ptr(0)
	return p.IsValid() || err != nil
}

func (s SegTypeHopReplyEntry) SetInterfaces(v PathInterface_List) error {
	return s.Struct.SetPtr(0, v.List.ToPtr())
}

// NewInterfaces sets the interfaces field to a newly
// allocated PathInterface_List, preferring placement in s's segment.
func (s SegTypeHopReplyEntry) NewInterfaces(n int32) (PathInterface_List, error) {
	l, err := NewPathInterface_List(s.Struct.Segment(), n)
	if err != nil {
		return PathInterface_List{}, err
	}
	err = s.Struct.SetPtr(0, l.List.ToPtr())
	return l, err
}

func (s SegTypeHopReplyEntry) Timestamp() uint32 {
	return s.Struct.Uint32(0)
}

func (s SegTypeHopReplyEntry) SetTimestamp(v uint32) {
	s.Struct.SetUint32(0, v)
}

func (s SegTypeHopReplyEntry) ExpTime() uint32 {
	return s.Struct.Uint32(4)
}

func (s SegTypeHopReplyEntry) SetExpTime(v uint32) {
	s.Struct.SetUint32(4, v)
}

// SegTypeHopReplyEntry_List is a list of SegTypeHopReplyEntry.
type SegTypeHopReplyEntry_List struct{ capnp.List }

// NewSegTypeHopReplyEntry creates a new list of SegTypeHopReplyEntry.
func NewSegTypeHopReplyEntry_List(s *capnp.Segment, sz int32) (SegTypeHopReplyEntry_List, error) {
	l, err := capnp.NewCompositeList(s, capnp.ObjectSize{DataSize: 8, PointerCount: 1}, sz)
	return SegTypeHopReplyEntry_List{l}, err
}

func (s SegTypeHopReplyEntry_List) At(i int) SegTypeHopReplyEntry {
	return SegTypeHopReplyEntry{s.List.Struct(i)}
}

func (s SegTypeHopReplyEntry_List) Set(i int, v SegTypeHopReplyEntry) error {
	return s.List.SetStruct(i, v.Struct)
}

func (s SegTypeHopReplyEntry_List) String() string {
	str, _ := text.MarshalList(0xacf8185a51a9f1b4, s.List)
	return str
}

// SegTypeHopReplyEntry_Promise is a wrapper for a SegTypeHopReplyEntry promised by a client call.
type SegTypeHopReplyEntry_Promise struct{ *capnp.Pipeline }

func (p SegTypeHopReplyEntry_Promise) Struct() (SegTypeHopReplyEntry, error) {
	s, err := p.Pipeline.Struct()
	return SegTypeHopReplyEntry{s}, err
}

const schema_8f4bd412642c9517 = "x\xda\x94X{\x90\x14\xd5\xd5?\xe7\xf6\xec\xcc\xbef" +
	"gz\xef\x8c\"_\xf9m\xb40\x0a%[\xee\xa2\xd1" +
	"\xa2\xd4\x85\xe5\xb9f\xc1\xbd3h\x12K+\xb6;w" +
	"w\x07gg\x86\xee\xde\x85!1\x1b-\xc9\x83\xc4\xf2" +
	"I)Q*\xe0{\x13\x8c\x8f\x10\x03\xf8\x88FH\x14" +
	"5J\xc5*#\xa5\x11Q\x14_U\x8a$\x88\x01;" +
	"u\xba{\xba\x9bf@\xc3_\xcd=g\xcf=\x8f\xdf" +
	"\xf9\x9ds\xe7\x8c\x07\xa33XG\xdd}\x0d\x00\xa2\\" +
	"\x17\xb5>{\xe8\x81{?\xdc\xb7\xfc\xa7\xa0\xc6\xd1:" +
	"~\xd5\xe9\xb9\xd6W\xbe}=\xd4a\x0c\x80o\x8a\xec" +
	"\xe0[#\xf4\xf5t\xa4\x0b\xd0\xda\xb7\xe3\xc0\xf7\x9f\xdc" +
	"\xf6\xe6J\x10q\x0c*+\xa4\xf2id\x1b?\x149" +
	"\x1e`ZC\xddw\x10\xd0\x9a\xa8\xde1\xf7\x1d\xfd\xea" +
	"\xebC\xda\xb6\xbd%\xd1Gx%J_#Q\xb2<" +
	"\xf7\x99\xb9c\x1bn\xff\xe0F\xd2e\xbe\xee\x1c\x16\x8b" +
	"c\x84\xaf\x8an\xe6kH{\xda\xea\xe8\x85\x0a\xa0\xb5" +
	"fOj\xd7i\x13~tK-\xa7\xcfj\xdc\xc6g" +
	"6\xd2\xd7y\x8ddz\xddUM\xf7\x9f5\xa3\xb2*" +
	"d\xdavc\xb8q\x07\xaf\xd8\xba#\x8dK\x01\xad\xf7" +
	"\xbb\xdf\\q\xdf\x8a\xe8\xed\xb5\xecno\xfc\x80\xbfa" +
	"\xeb\xbef\xdb\xdd\xf1\xda\xca=o\xd5\xfd\xedv\x10i" +
	"T\xac\x0f\xef\xda\xf2zG\xfa/[ \x8d1\x04\xe0" +
	"\x87\x1aw\x00rl\"\xab\xad\x1dk;.\xad\xbfp" +
	"\xbc\x86\xd5i\x9751\xe4\xf9&2+\x9b\xc8\xec\x86" +
	"O\xc7\xc5%\x13>_\x1f\xce\xb1\xad\xbd\xba\xa9\x15\xf9" +
	"\xb8\xad}O\xd3\x83\x80\xd67N\xb9yi\xdd\xa9\x13" +
	"\x1f\x09k3R\xb9\xa8\xf9\x11~Y3}}\xaf\x99" +
	"\xfch?q\xe3c{n\xdb\xf6(\x88o\"Z\x93" +
	"~\xf0R\x81\xcf\xb8uS\xd5t\xf3%\xc8\x1f\xb0\xb5" +
	"\xc7mmO.N\xc0@\xe9\xedbO\xab\x8bw\"" +
	"O\xc7\xcf\x06\x98v^\xdc\xae\xf6\x9e\xbd\xc7\x8d\xee\xfe" +
	"x\xc635S\xd7\xf2\x01\x7f\xa3\xc5N]\x0b\xc5\xe8" +
	"%K\xc4Q\x09+7$~\xc3\xd5\x04]\x12O\xb4" +
	"\x91\xe5\x8fFo-/j\xb7\xb6\x86,\xdb!\xa6\x93" +
	"\xbb\xf8II\xfa:1IN_\xf3\xc7\x8d_\xfe\xe3" +
	"\xef\xb3\x9e\xad\x19\xe2U\xc9\x0c\xf2\x1b\x93\xc7\x03\xf0\xd5" +
	"\xb6vB\xbe4\xb3\xfb\xda\xff\xdfV\x0b\xa1\x0d\xea\x0e" +
	"\x9eV\xe9KU\xc9\xe7\xe7{\xb7\xaf{\xfb\xfa\xb3\x9f" +
	"\x071\x05\x03\xf78\x96;\xd4\x9b\x90\xf7\xd8\xdasT" +
	"\xaa\xcb=\xefN\xba\xe3\xfe;\xe5\x0b\xb5,\xefV7" +
	"\xf3\x8fm\xdd\xf7m\xcb\xaf\xbf\xf5\xd8\xbd?\xbf\xf9\xd4" +
	"\xf7jV\xbc\xa1u\"\xf2\x13Z\xedX[\xc9ra" +
	"g\xe6\xe2\x89\xdb\xf7\xbfW+\xcf[[\xb7\xf1\xed\xb6" +
	"\xee\x8b\xaddyy\xdd\xf2\xbbc\x7f\xfa\xdd\x87\x94\x0d" +
	"\xe6g\x83\xbc\x98v\xa8\xf5\xcf\xc8\xd3\xdc\x0e\x90\x93\xe1" +
	"sN}\xf5'\x83\xe9\xad\x9f\xd4r\x83?\xcc\xf7\xf2" +
	"'l\xe5M\x9c2\xd7\xf5\xee\xf9\x93\x1f}?\xf1i" +
	"M\xe5\x13R\x9b\xf9I)\xbb()R\xde\xf4\xe4\xb2" +
	"\xf1_\xbcz\xef\xfeZ._\x97\xda\xcbW\xdb\xba\xab" +
	"R\xe4r\xf3\xc4\x7f\xfev\xf0\x94\xdd\x07@\x1c\x87\x01" +
	"x\xa7\x99\xddU[S\xbb\x00\xf9s\xb6\xd5\xdf?\xba" +
	"|\xde\x86\xbb\x1e\xfe\xa2V_\x9f\x92\xde\xcb;\xd2\xf4" +
	"55M\xb1\x19\xfd\xf9R1\xd7\xde\xcf\xb4r\xb1<" +
	"\xbdgnOq\xa0\x94\x91KF\xa4b\x98}\x88\"" +
	"\xa2D\x00\"\x08\xa0\xc6;\x01D\xbd\x82b\x12\xc3\xb6" +
	"\xfc@\xcfl\x03[\x00\xfb\x14\xc4\x06`\xf4\x19\xb25" +
	"wi\xaeO3\x87\x16HS\x03\x10\x91 \xe8T\\" +
	"ly\xb2DN351\xc1\xbbgu7\x80\xb8E" +
	"A\xb1\x96!b\x0a\xe9l\xcd\xc9\x00\xe26\x05\xc5\xdd" +
	"\x0cU\x86)d\x00\xea\xbaK\x00\xc4Z\x05\xc5\xe3\x0c" +
	"U\x05S\xa8\x00\xa8\x9b\xe8\xaf7((\x9eb\xa8F" +
	"\x92)\x8c\x00\xa8O\\\x00 \x1eWP<\xcbP\xad" +
	"c)\xac\x03P\xb7\xd2\xe1\x16\x05\xc5\xcb\x0c\xc7\x06\x1c" +
	"g1\x0e\x0c\xe3\x80\xb1as\x04c\xc00\x06h\xe5" +
	"\x8b\xa6\xd4\x07\xb4~P\xa4\x17r\xd2'O@:\x1c" +
	"\x93\xcb\xca\x8b\xf2\xc3\x12\xeb\x81a=\xa05$\xb5\x9c" +
	"\xd4/\xee\x04R\x00\x86\xd4\xaf\xc3\xd2\xd4(Z:K" +
	"\xfa\xe9\x00\xc4d }h\xa7/#G\xdb2\xb2\\" +
	"\xa8\x84\xaa0\xdd\xadB\x8aa\x97.\x8d\x91\x82\xe99" +
	"z\xb8\x81\xec\xac\x9e\xae\x0b\x17\xce^`\x0c\x92\x85s" +
	"\xab\x16\xf8*\x9c\x08\x90\xbd\x01\x15\xcc\xde\x81\x0c\xe3h" +
	"Yv\x92\xf9j\xec\x04\xc8\xdeB\x82\xb5$`_Z" +
	"v\xa2\xf9\x1a\xec\x06\xc8\xdeF\x82\xbbI\xa0\x1c\xb2\xec" +
	"d\xf3u\x98\x01\xc8\xae%\xc1z\x12D\x0eZv\xc2" +
	"\xf9\xb8-\xb8\x9f\x04\x1bHP\xf7\x1f\xcbN:\x7f\x18" +
	"\xaf\x00\xc8>D\x82\xc7I\x10\xfd\xc2Ja\x94\x9a\x07" +
	"\xaf\x01\xc8n$\xc1\x16\x12\xc4\x0eX)\xbb\x0d\x9eF" +
	"\x1d \xfb\x14\x09^ A\xfd\xe7V\x0a\xeb\x01\xf8s" +
	"\xb6\xa9gI\xf0\x0a\x09\x1a\xf6[)l N\xc5_" +
	"\x01d_!\xc1N\x124\xfe\xdbJa#\x00\x7f\x03" +
	"W\x02dw\x92\xe0#\x124\xfd\xcbJa\x13\xb1\x0d" +
	"^\x00\x90\xddC\x82}$h\xdeg\xa5\xb0\x99&\xb7" +
	"}\xf9'$8H\x82\xf8gV\x0a\xe3\x00\xfc\x80\xed" +
	"\xee\xe7$\x880\x86j\x0b\xa6\xb0\x05\x80#\xa3T\x1d" +
	"\xa4\xf3z\xc6P\xc9\xe7\xec\xeeh\x00l\x1b)\x1a\xd2" +
	"\x84\xe8XY3\x872r\x09&}\xb2w\x01\xe0H" +
	"\xca\x05\xc0\x0a&}\"q\xa5\x9a\xe1\xf4& \xfd\xad" +
	"G\xa3ai\xac\\\xa0\xbf\xf6\xf6\x00W\xae\xcb\xd1\x85" +
	"%3?\x80\xf9~\xcd\xcc\x97\x8a\x04@o\xa6\xbb:" +
	"\xf9\x01\xd7F\xdb\x92\x11i\x98\x98\xf4W\xa0\xb0\x86{" +
	"\x8bG\xb9U\x08K}4\xdf/{0\xc0\"\x98\xf4" +
	"\xc7|M\xb5r\xa1b\xf7\x83G\x86\xbe\xcb\xae\x90\xa4" +
	"\xde\xce\xe4\xd9\x18\\T)\xcb\xf9\xd0V*;\xe9\xf4" +
	"fVH\x03I\x81\xec`\xd2\x9f\xc5\x8e\xce\x98\xa9k" +
	"\xfd\xb2'W\xed\xfb\x10\x85\xcd\xcc\xf6\xf8\x1e\x86\xfa\xb0" +
	"\xdbg\xc31Y4\xf5|\x90\x1c<\x06v\xc8!d" +
	"\x96\x98\xa6\xc7!\x15\xa5_\x92\xddz\xcf\xeedb\xd9" +
	"I\x0a\x8a3\x18\xaaU\xfa\x9b:\x05@\x9c\xa6\xa08" +
	"\x93\xa8\xd7\xc8iF\x15U\x09\"\xe2\xea\x7fB\xd7d" +
	"\xdc\x92\xe7\xfb\xb5\x04\x95<\x14\x00\xd1_\xb3\x82b\x02" +
	"C\xcb\xc8\xc8Q\x0a\xd5Iu\xe6\xed/\xce^1\xaf" +
	"\xf3\xd7ab\xf2\xbd\xcf\xc8%\xed\x03\x05M\x194\xc8" +
	"\xf5\xe4\x0d\x0e\xf7N\xee\x0e\xfa~\xa3\xc3\xbdS\xa7\xfb" +
	"\xbe\x8f\xe9r@\x97\xc6P\x95\x10\xbb\x86\xf2\xb9\x9c," +
	"z\xfcX\xbdHq\x08\xccEI\x15K\x86\x19\xae\xc1" +
	"b7\x84\xd3\x98\x87\xa9E\x90\xa8\x94\xfdR$,s" +
	"\xf0\xe5\xff\x9b<5\xb3+\\\x8a\xea\x1d\x0eF\\\x88" +
	"\xcc)\x9a:\xda\x8c\xdb\xec\xdd2\x87\xc6\xccl\x05\xc5" +
	"\xe5\xfe<\xba,\x03 .UP\x0c\x05\xe6\x91\xa4\xf0" +
	"/WP\x14\xd8\xd7\x1c\x1a\x96\x99\x1f\x96\x86\xa9\x0d\x03" +
	"\x96\xab\x83\xe3\x88Ar8\xab\xcf/\x19m&\xa5$" +
	"\x04\x9b)~\xea\xe9\x9f\xbf-\xa8S;\x81%\xca%" +
	"\xdd\x9b\x13mZ.\xa7\x1b\x9e\xddHxZ\xb7W?" +
	"hT\xb5/,)\xa6<\xd6e.D;\xfd2'" +
	"\x8a%Sb30l\x86\x10^C\xe9\xafqk\x9b" +
	"}\xadh\xc6\xc0\x92\xa6\xaa7\xf9{\xa5\x9a>\xd9\xdf" +
	"\xd7Uu\x8a\xe5\xb6R?\xca\xde|\xf1\xcaE\x952" +
	"\xca\xd8<YJ,,\x992\xb8W,\x0e\xec\x10\xc8" +
	"\x1c\xb7\xd7e\xdc\x1db}\xa0\x90\xe3+\x01\xc4z\x05" +
	"\xc5F\x86\xa88\xd8\xfeC\xc6\xdd+^\xa6\xbd\x02\x1d" +
	"l\xbfx\x05\x80xAA\xb1'\xb0W\xec\xa6L\xec" +
	"TP\x1cdh\x99%S+\xf4j&$d\xb1\xbf" +
	"\xe2Mj\xfbx~\xa9\x0ch`\x14\x18Fi9\xc8" +
	"\x17\xf3\xc3Z\xa1\x1b\xb5bni>g\x0e\x01x\x18" +
	"(8\x81I\xd2\xf7\xc0\xe4\xa5\xc7\x05\x93f\xf4\x96\x88" +
	"\xdc!V*\x06\xd4\xbc\xc49jmT\x9c\x80\xd8K" +
	"eM\xaa\x0a\xf4G\xa2\xc62rL\x12\xf4\xdek!" +
	"\xcbX\xa5\x91\x04\xf1\x08YLy\x16\xaf\xa2Eo\x99" +
	"\x82\xe2\xda\x00\xfd]M\x87?TP\xfc\x8c\x8aT\xef" +
	"\x14i\x05\xf1\xd7\xb5\x0a\x8a\x1b\xa8H\x18xu\xaa\xd7" +
	"u\x02\xc3\x88S\x8d\x11\xa2\x9f\xb2\x82\xe2\x97\x0cc9" +
	"\xc3\xac\x021f\xe8\xfd\x1e(\x87\xb5e\x84>\x83\xe8" +
	"\xaf\xda$\x03\x05m\xd0\xe8\x1a*\xcf\x1a\x18\x0c\xc44" +
	"a\xce;\xe7\xf3\xbf\x9e\xb4\xf9\xe8\xc4\xee\xf2H\xcc\xd4" +
	"+G\xef\x1a\x9f\xd9)\x8a\xd3\x15\x14\xe70L\xd0\xfc" +
	"\xc7\xa4\xff\xa0t\xe9w\xa8d\x98>9{\x8b\x7f\x88" +
	"\x9c\xbf\xa2\x8d\xe7I,\xd9K\xb8\xf7ZS\xb1{l" +
	"^_v6u[\xc0\xcbk\xdc>\x9e\xed\xf7\xf6L" +
	"B\xf4\xb9\x0a\x8a\xf9\x0c-\xbd4bJ\xbd\xb7\x84\xce" +
	"\x1ea\x80\x9f\x1c\xcf\xb4\x8b\xb4\xda\x9d\x7f\x04\xb0\x14\x07" +
	"\x04\x01XM\xf1w\xdc\x84Y)KLX?>\xe7" +
	"\xceF9\xbe\x7f\x1d\xd9N\x04\xac\xd5}U\xd8\xa5v" +
	"'H\xd4B\xb4~\x81K\xeb}\x81r,\xa0.\xef" +
	"UP|\x97!Q\x04\x01\xed\"\x02y\x9f\x82\xe2R" +
	"\x86VA3\xf3\xe6HNR-\x1a\x81a#5g" +
	"\xa98H\x87\x80\xb2z6F\x14+\x0d\xa3J\x82!" +
	"\xec\xcf\xcc\xf6t9S\xed(O\xac\x14;6o\x1e" +
	"6\x1a\x9d\xb9\xa5\xe8\xe1\xb9uE\xad\x00\xa9\x95\xe6+" +
	"(\x16\xf9\x01\x8a\x8c\x1b`!8FcN\xde\x83\xe3" +
	"3\x01\x183\xcd\x82\xff\xc4\xa9\x023\xc8JA|\xb6" +
	"\x1c\xf5\x81\xf9?oT\xde\x1b<d6z\xec\xfaW" +
	"gCu4H\x08%I\xaf\x95\xa4\xc5>\x0a\xbc\xa1" +
	"pQg\x00\x06\xf6t\xef\xcd\x17\xa1\xcd6\xea\xf1z" +
	"Y\xda\xc7WB\"x|\xccF\x08d\xa4\x8d\xd6\x8f" +
	"\xca\xd7\x98\xb5A\xd28l\x01\xfczT\xe1\x11p\xd7" +
	"\x90\xf7\xc2\x0c\xdc\x98\xf1'y\xf5\xc6\x8en\xf7Fb" +
	"\x00\xa9\xeb%}V\xc9\xc6\xbb\x1b\xe1\x91\xf5\xf2~\x9a" +
	":\xcaX\xf1\xf0[\xf3\x91{L(x\xbf\x0a\xd54" +
	"=\xdfMA\xbb\x96\x8b\xe5t\xc3\x09\xcc\x89\xe2\x08\x06" +
	"f\xa1\xdd:\x91/\x8f\x9eY}\x0b\xd0\x7f\xbe\xf5\xd5" +
	"\x0f\x03\xbfh\x01T\x11Vf((z\xe9\xa2\x88s" +
	"{\xcf\xc9\x01\xa8\xb1>\xe7\xf6\x05\xd3\xfd~<\x1c&" +
	"\xc1\x9f \xba\xf2\xc6\xac\x92.\xab{\xf2\x7f\x03\x00\x00" +
	"\xff\xff8\xeb\xb2\xfb"

func init() {
	schemas.Register(schema_8f4bd412642c9517,
		0x877af4eba6adb0f3,
		0x8adfcabe5ff9daf4,
		0x8f8172e4469c111a,
		0x91ea9bb47f46c346,
		0x947e1828e214e89d,
		0x95794035a80b7da1,
		0x9b0685a785df42e9,
		0x9bce05e1e88ad9da,
		0xa94f085c31a03112,
		0xacf8185a51a9f1b4,
		0xb21a270577932520,
		0xb6ca98e8bbb81d2e,
		0xb99740136ccf7b24,
		0xc340ede57616f2e8,
		0xc4c61531dcc4a3eb,
		0xc5ff2e54709776ec,
		0xc843d3d8feb8b782,
		0xca1e844241cf650f,
		0xcb378fe3a1d14ccb,
		0xcc65a2a89c24e6a5,
		0xe7279389a6bbe1dc,
		0xe7f7d11a5652e06c,
		0xebaebf07a47a057a,
		0xf0c5156786d72738,
		0xf10fe9b6293ee63f,
		0xf7a6d78ba978beb9,
		0xf9e52567abde1a0c,
		0xfab1a3b4477ab6b3)
}
